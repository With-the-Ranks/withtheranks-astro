---
import Layout from "../../../../layouts/Layout.astro";
import "animate.css";
---

<Layout title="With the Ranks">
	<main
		class="animate__animated animate__fadeIn animate__slow py-20 md:py-40"
	>
		<div class="flex items-center flex-col">
			<h2 class="text-center">Data Dictionary</h2>

			<h4>
				The following table is designed to help you better understand
				the data from your texting campaigns, allowing you to analyze
				campaign performance. Sample scripts for potential analyses can
				be found below the table. Depending on the platform you use, you
				may need to adjust schema prefixes (e.g. &quot;message&quot; may
				need to become &quot;spoke.message&quot;).
			</h4><table>
				<thead>
					<tr>
						<th style="text-align:left;"> title</th>
						<th style="text-align:left;"> description</th>
						<th> key columns</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td style="text-align:left;"> campaign</td>
						<td style="text-align:left;">
							Contains information about each campaign - e.g. when
							it was created or whether it was archived. Primary
							key is campaign.id.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> campaign_contact</td>
						<td style="text-align:left;">
							Contains information about a contact for each
							campaign. Joins to campaign on
							campaign_contact.campaign_id = campaign.id. Primary
							key is campaign_contact.id.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> message</td>
						<td style="text-align:left;">
							Contains each message, inbound and outbound. Joins
							to campaign and campaign_contact on
							message.campaign_contact_id = campaign_contact.id.
						</td>
						<td>
							is_from_contact = true means message is inbound, =
							false means outbound message
						</td>
					</tr>
					<tr>
						<td style="text-align:left;"> question_response</td>
						<td style="text-align:left;">
							Contains "question responses," or Spoke question
							responses. Joins to campaign and campaign_contact on
							question_response.campaign_contact_id =
							campaign_contact.id. Only includes contacts who have
							a question_response populated.
						</td>
						<td>
							'value' contains question response values like
							support score, activist codes, Wrong Number, etc.
						</td>
					</tr>
					<tr>
						<td style="text-align:left;"> all_question_response</td>
						<td style="text-align:left;">
							Contains "question responses", or Spoke question
							responses. Joins to campaign and campaign_contact on
							question_response.campaign_contact_id =
							campaign_contact.id. Includes all contacts,
							including those who did not respond, where the
							"value" is null.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> canned_response</td>
						<td style="text-align:left;">
							Contains all Spoke canned responses.
						</td>
						<td> &nbsp; &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> interaction_step</td>
						<td style="text-align:left;">
							Contains all of the scripts at each 'interaction
							step' in the texting script, as well as the
							hierarchy for how all of the 'interaction steps' in
							the texting script tree are related to one another.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> opt_out</td>
						<td style="text-align:left;">
							Contains all opted out contacts, as well as the
							campaigns on which they were opted out.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> campaign_contact_tag</td>
						<td style="text-align:left;">
							Campaign contacts and associated tags. Must be
							joined back to all_tag or tag on
							campaign_contact_tag.tag_id = all_tag.id to get tag
							titles.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> all_tag</td>
						<td style="text-align:left;">
							Contains all tags, including those which have been
							deleted.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> tag</td>
						<td style="text-align:left;">
							A view of all_tag for tags that have not been
							deleted.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> user</td>
						<td style="text-align:left;">
							Contains information about users (texters,
							supervolunteers, admins, owners).
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> team</td>
						<td style="text-align:left;">
							Contains team ID and team title for texting teams
							you may have within your organization.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> user_team</td>
						<td style="text-align:left;">
							Crosswalk between team and user.
						</td>
						<td> joins to team on team.id = user_team.team_id</td>
					</tr>
					<tr>
						<td style="text-align:left;"> user_organization</td>
						<td style="text-align:left;">
							Crosswalk between user and organization.
						</td>
						<td> &nbsp;</td>
					</tr>
					<tr>
						<td style="text-align:left;"> organization</td>
						<td style="text-align:left;">
							Lists all organizations within your instance of
							Spoke. For example, you might have different
							organizations if there are multiple sub-groups /
							affiliates of a larger organization using your
							Spoke.
						</td>
						<td>
							joins to campaign on organization.id =
							campaign.organization_id
						</td>
					</tr>
				</tbody>
			</table><h3>Sample Scripts</h3><p>
				How to get <strong
					>counts of contacts with certain tags within a certain
					interval</strong
				>:
			</p><pre><p>select at.title, count(distinct cc.id)  from campaign_contact cc</p><p>left join campaign_contact_tag cct on cc.id = cct.campaign_contact_id</p><p>left join all_tag at on cct.tag_id = at.id</p><p>where cct.updated_at between now() - interval &#39;12 hours&#39; and now()</p><p>group by at.title</p><br /></pre><p
			>
				How to get an <strong>export ready for VAN bulk upload</strong>,
				marking null values as &#39;canvassed, no response&#39;:
			</p><pre><p>select distinct cc.external_id,</p><p>                case when aqr.value is null then &#39;canvassed, no response&#39;</p><p>                     else aqr.value end as value,</p><p>                to_char(m.sent_at,&#39;MM-DD-YYYY&#39;) as date from campaign c</p><p>left join campaign_contact cc on c.id = cc.campaign_id</p><p>left join message m on cc.id = m.campaign_contact_id</p><p>left join all_question_response aqr on cc.id = aqr.campaign_contact_id</p><br /></pre><p
			>
				How to find the <strong
					>number of texts sent inbound and outbound</strong
				>, grouped by day:
			</p><p>
				<em>edit timezone to reflect your timezone</em>
			</p><pre><p>select   date(sent_at::timestamptz at time zone &#39;EDT&#39;) as date, </p><p>         case </p><p>                  when is_from_contact = true then &#39;inbound&#39; </p><p>                  when is_from_contact = false then &#39;outbound&#39; </p><p>         end      as direction, </p><p>         Count(*) as messages </p><p>from     message </p><p>group by date(sent_at::timestamptz at time zone &#39;EDT&#39;), </p><p>         is_from_contact </p><p>order by date(sent_at::timestamptz at time zone &#39;EDT&#39;) desc;</p><br /></pre><p
			>
				How to find <strong
					>number of texts sent by a member of a certain team</strong
				> (i.e. &quot;Spanish texting team&quot;)
			</p><pre><p>select Count(*) </p><p>from   message </p><p>where  user_id in </p><p>       ( </p><p>              select user_id </p><p>              from   user_team </p><p>              join   team </p><p>              on     team.id = user_team.team_id </p><p>              where  team.title ilike &#39;%spanish%&#39; );</p><br /></pre><p
			>
				How to find <strong>number of unique texters</strong> in your
				organization:
			</p><pre><p>select count(*) from user;</p><br /></pre><p>
				How to calculate <strong>response rates</strong>
				<strong>by script option</strong> for Campaign ID 75, <strong
					>for initial text only:</strong
				>
			</p><pre><p>-- Your analysis on messages, grouped by the script_option_hash</p><p>-- replace campaign_id with actual campaign ID</p><p>with hash_counts as (</p><p>  select</p><p>    campaign_id,</p><p>    script_version_hash,</p><p>    count(*) as hash_count</p><p>  from message</p><p>  join campaign_contact</p><p>    on campaign_contact.id = message.campaign_contact_id</p><p>  where</p><p>    campaign_id = 75</p><p>  group by 1, 2</p><p>),</p><p>-- Fetch script options as reference</p><p>scripts as (</p><p>  select</p><p>    interaction_step.id as istep_id,</p><p>    interaction_step.campaign_id,</p><p>    unnest(interaction_step.script_options) as script_option</p><p>  from interaction_step</p><p>  where campaign_id = 75</p><p>-- EDITING HERE WILL CHANGE the &#39;interaction_step&#39; parent, and for initial texts, the </p><p>-- interaction step parent will be null </p><p>  and parent_interaction_id is null</p><p>),</p><p>-- Resolve analysis script_option hashs to script_option text</p><p>script_options as (select</p><p>  scripts.istep_id,</p><p>  scripts.campaign_id,</p><p>  hash_counts.hash_count,</p><p>  scripts.script_option,</p><p>  hash_counts.script_version_hash</p><p>from scripts</p><p>join hash_counts</p><p>  on hash_counts.script_version_hash = md5(scripts.script_option)</p><p>order by 1, 3 desc),</p><p>-- Response rate =</p><p>-- of everyone who got a certain initial, how many of them had ANY response</p><p>script_total_contacts as (</p><p>select m.script_version_hash,</p><p>       cc.id as campaign_contact_id,</p><p>       script_option</p><p>from message m</p><p>inner join campaign_contact cc on m.campaign_contact_id = cc.id</p><p>inner join script_options sc on sc.script_version_hash = m.script_version_hash),</p><p>script_response_contacts as (</p><p>select distinct campaign_contact_id from message</p><p>where is_from_contact = true</p><p>),</p><p>responded_bool as (</p><p>select</p><p>stc.campaign_contact_id,</p><p>stc.script_option,</p><p>case when src.campaign_contact_id is null then false</p><p>else true end as responded</p><p>from</p><p>script_total_contacts stc</p><p>left join script_response_contacts src on src.campaign_contact_id = stc.campaign_contact_id),</p><p>subtotals as (</p><p>select  script_option,responded, count(distinct campaign_contact_id) as subtotal_count</p><p>from responded_bool</p><p>group by script_option,responded),</p><p>totals as (</p><p>select  script_option,count(distinct campaign_contact_id) as total_count</p><p>from responded_bool</p><p>group by script_option)</p><p>select totals.script_option,</p><p>       responded,</p><p>       subtotal_count,</p><p>       total_count,</p><p>       subtotal_count::numeric*100 / total_count::numeric</p><p>from subtotals</p><p>left join totals on subtotals.script_option = totals.script_option</p><br /></pre><p
			>
				How to <strong>calculate ID rates</strong> by script option for Campaign
				ID 75, <strong>for initial text only:</strong>
			</p><pre><p>-- Your analysis on messages, grouped by the script_option_hash</p><p>with subtotal as (select value,</p><p>       m.script_version_hash,</p><p>       x.script_option,</p><p>       count(distinct qr.campaign_contact_id) as subtotal</p><p>from campaign c</p><p>left join campaign_contact cc on c.id = cc.campaign_id</p><p>left join question_response qr on cc.id = qr.campaign_contact_id</p><p>left join message m on cc.id = m.campaign_contact_id</p><p>left join</p><p>(with hash_counts as (</p><p>  select</p><p>    campaign_id,</p><p>    script_version_hash,</p><p>    count(*) as hash_count</p><p>  from message</p><p>  join campaign_contact</p><p>    on campaign_contact.id = message.campaign_contact_id</p><p>  where</p><p>    campaign_id in (75)</p><p>  group by 1, 2</p><p>),</p><p>-- Fetch script options as reference</p><p>scripts as (</p><p>  select</p><p>    interaction_step.id as istep_id,</p><p>    interaction_step.campaign_id,</p><p>    unnest(interaction_step.script_options) as script_option</p><p>  from interaction_step</p><p>  where campaign_id in (75)</p><p>-- EDITING HERE WILL CHANGE the &#39;interaction_step&#39; parent, and for initial texts, the </p><p>-- interaction step parent will be null </p><p>  and parent_interaction_id is null</p><p>)</p><p>-- Resolve analysis script_option hashs to script_option text</p><p>select</p><p>  scripts.istep_id,</p><p>  scripts.campaign_id,</p><p>  hash_counts.hash_count,</p><p>  scripts.script_option,</p><p>  hash_counts.script_version_hash</p><p>from scripts</p><p>join hash_counts</p><p>  on hash_counts.script_version_hash = md5(scripts.script_option)</p><p>order by 1, 3 desc) x on x.script_version_hash = m.script_version_hash</p><p>where c.id = 75</p><p>-- This line limits the question_value responses to those that include ---- numbers only - useful if you are calculating support % </p><p>and value ~ &#39;[0-9]&#39;</p><p>group by value, m.script_version_hash,x.script_option),</p><p>-- Calculate total sent of each script version</p><p>totals as (</p><p>select subtotal.script_version_hash,</p><p>       subtotal.script_option,</p><p>       sum(subtotal.subtotal) as total</p><p>from subtotal</p><p>group by script_version_hash, subtotal.script_option)</p><p>-- Final analysis</p><p>select st.*,</p><p>       t.total,</p><p>       case </p><p>	when t.total = 0 then t.total</p><p>     	else st.subtotal::numeric*100/t.total</p><p>       end as percent</p><p>from subtotal st</p><p>left join totals t on t.script_version_hash = st.script_version_hash</p><br /></pre><p
			>
				How to <strong
					>analyze &quot;A/B&quot; test results using script versions</strong
				> for Campaign ID 75:
			</p><pre><p>-- Your analysis on messages, grouped by the script_option_hash</p><p>with hash_counts as (</p><p>  select</p><p>    campaign_id,</p><p>    script_version_hash,</p><p>    count(*) as hash_count</p><p>  from message</p><p>  join campaign_contact</p><p>    on campaign_contact.id = message.campaign_contact_id</p><p>  where</p><p>    campaign_id = 75</p><p>  group by 1, 2</p><p>),</p><p>-- Fetch script options as reference</p><p>scripts as (</p><p>  select</p><p>    interaction_step.id as istep_id,</p><p>    interaction_step.campaign_id,</p><p>    unnest(interaction_step.script_options) as script_option</p><p>  from interaction_step</p><p>  where campaign_id = 75</p><p>)</p><p>-- Resolve analysis script_option hashes to script_option text</p><p>select</p><p>  scripts.istep_id,</p><p>  scripts.campaign_id,</p><p>  hash_counts.hash_count,</p><p>  scripts.script_option,</p><p>  hash_counts.script_version_hash</p><p>from scripts</p><p>join hash_counts</p><p>  on hash_counts.script_version_hash = md5(scripts.script_option)</p><p>order by 1, 3 desc</p><p>;</p><br /></pre><p
			>
				How to analyze <strong>reply rates</strong> of &quot;A/B&quot; test
				results for Campaign ID 75:
			</p><pre><p>select </p><p>  ab_test.script_version_hash,</p><p>  responded,</p><p>  total,</p><p>  reply_rate,</p><p>  sample.text as sample_message</p><p>from (</p><p>    select</p><p>        script_version_hash,</p><p>        count(*) filter (where message_status &lt;&gt; &#39;messaged&#39; and message_status &lt;&gt; &#39;needsMessage&#39;) as responded,</p><p>        count(*) filter (where message_status &lt;&gt; &#39;needsMessage&#39;) as total,</p><p>        count(*) filter (where message_status &lt;&gt; &#39;messaged&#39; and message_status &lt;&gt; &#39;needsMessage&#39;) / </p><p>        (count(*) filter (where message_status &lt;&gt; &#39;needsMessage&#39;))::float * 100 as reply_rate</p><p>    from message</p><p>    join campaign_contact</p><p>      on campaign_contact.id = message.campaign_contact_id</p><p>    where campaign_id = 75</p><p>      and not exists (</p><p>        select 1 from message earlier_message</p><p>        where earlier_message.campaign_contact_id = campaign_contact.id</p><p>          and earlier_message.created_at &lt; message.created_at</p><p>      )</p><p>      and send_status = &#39;DELIVERED&#39;</p><p>    group by 1</p><p>) ab_test</p><p>join message sample on sample.id = (</p><p>  select id</p><p>  from message</p><p>  where message.script_version_hash = ab_test.script_version_hash</p><p>  limit 1</p><p>);</p><br /></pre><p
			>
				How to analyze <strong>opt out rates</strong> of &quot;A/B&quot;
				test results for Campaign ID 75:
			</p><pre><p>select </p><p>  ab_test.script_version_hash,</p><p>  opted_out,</p><p>  total,</p><p>  opt_out_rate,</p><p>  sample.text as sample_message</p><p>from (</p><p>    select</p><p>        script_version_hash,</p><p>        count(*) filter (where is_opted_out = true and message_status &lt;&gt; &#39;needsMessage&#39;) as opted_out,</p><p>        count(*) filter (where message_status &lt;&gt; &#39;needsMessage&#39;) as total,</p><p>        count(*) filter (where is_opted_out = true and message_status &lt;&gt; &#39;needsMessage&#39;) / </p><p>        (count(*) filter (where message_status &lt;&gt; &#39;needsMessage&#39;))::float * 100 as opt_out_rate</p><p>    from message</p><p>    join campaign_contact</p><p>      on campaign_contact.id = message.campaign_contact_id</p><p>    where campaign_id = 75</p><p>      and not exists (</p><p>        select 1 from message earlier_message</p><p>        where earlier_message.campaign_contact_id = campaign_contact.id</p><p>          and earlier_message.created_at &lt; message.created_at</p><p>      )</p><p>      and send_status = &#39;DELIVERED&#39;</p><p>    group by 1</p><p>) ab_test</p><p>join message sample on sample.id = (</p><p>  select id</p><p>  from message</p><p>  where message.script_version_hash = ab_test.script_version_hash</p><p>  limit 1</p><p>);</p><br /></pre>
		</div>
	</main>
</Layout>
